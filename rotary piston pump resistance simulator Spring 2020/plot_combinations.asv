function [fig_polar, fig_cartesian] = plot_combinations(C,pistons,on_off_matrix)
    %with that combination of pistons, generate torque as a function of time
    %with selected combinations of cylinders on and off
    piston_vectors = simulate_config(pistons, C);
    if nargin == 2
        on_off_matrix = generate_combination_matrix(size(piston_vectors,1));
    end
    combinations = generate_combinations(piston_vectors,on_off_matrix);
    
    fig_polar = figure;
    set(gcf,'color','w');
    %plot all combinations and their means on a polar graph
    num_combinatio
    for i = 1:size(combinations,1)
        radian_range = 0:(2*pi)/360:2*pi;
        %repeat first element to compensate for 0 vs 2pi position
        polarplot(0:(2*pi)/360:2*pi, [combinations(i,:) combinations(i,1)],...
            'DisplayName',char(on_off_matrix(i,:)+48));
        hold on;
        polarplot(radian_range, mean(combinations(i,:))*ones(1,361),'LineWidth',1,...
            'DisplayName',char(on_off_matrix(i,:)+48));
    end
    legend;

    %plot on cartesian coordinates
    fig_cartesian = figure;
    set(gcf,'color','w');
    for graph = transpose(combinations)
        plot(transpose(graph));
        hold on;
    end
    legend;
end